sudo: required
dist: xenial
language: cpp

before_script:
  - echo $TRAVIS_OS_NAME
  - |
    if [ "$TRAVIS_OS_NAME" = "osx" ]; then
      brew update
      brew tap nlohmann/json
      brew install eigen qt5
    fi
  - |
    if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      sudo add-apt-repository ppa:nschloe/eigen-backports -y
      sudo apt-get update -qq
      sudo apt-get install -y --allow-unauthenticated cmake libeigen3-dev qt5-default qttools5-dev-tools
    fi

matrix:
  include:
    - os: linux
      compiler: gcc
      env: TEST="build (gcc-5)"
      addons:
        apt:
          packages: ['gcc-5', 'g++-5']
          sources: &sources
            - ubuntu-toolchain-r-test
          update: true
      script:
        - CXX=g++-5 bash scripts/build.sh --build-type Debug --config --build --test --install --build-example

    - os: linux
      compiler: gcc
      env: TEST="build (gcc-6)"
      addons:
        apt:
          packages: ['gcc-6', 'g++-6']
          sources: &sources
            - ubuntu-toolchain-r-test
          update: true
      script:
        - CXX=g++-6 bash scripts/build.sh --build-type Debug --config --build --test --install --build-example

    - os: linux
      compiler: gcc
      env: TEST="build (gcc-7)"
      addons:
        apt:
          packages: ['gcc-7', 'g++-7']
          sources: &sources
            - ubuntu-toolchain-r-test
          update: true
      script:
        - CXX=g++-7 bash scripts/build.sh --build-type Debug --config --build --test --install --build-example

    - os: linux
      compiler: gcc
      env: TEST="build (gcc-8)"
      addons:
        apt:
          packages: ['gcc-8', 'g++-8']
          sources: &sources
            - ubuntu-toolchain-r-test
          update: true
      script:
        - CXX=g++-8 bash scripts/build.sh --build-type Debug --config --build --test --install --build-example

    - os: linux
      compiler: gcc
      env: TEST="build (gcc-9)"
      addons:
        apt:
          packages: ['gcc-9', 'g++-9']
          sources: &sources
            - ubuntu-toolchain-r-test
          update: true
      script:
        - CXX=g++-9 bash scripts/build.sh --build-type Debug --config --build --test --install --build-example

    - os: linux
      compiler: clang
      env: TEST="build (clang-3.8)"
      addons:
        apt:
          packages: ['clang-3.8', 'libc++-dev', 'libc++abi-dev']
          sources: &sources
            - llvm-toolchain-xenial-3.8
          update: true
      script:
        - CXX=clang++-3.8 bash scripts/build.sh --build-type Debug --libcpp --config --build --test --install --build-example

    - os: linux
      compiler: clang
      env: TEST="build (clang-4.0)"
      addons:
        apt:
          packages: ['clang-4.0', 'libc++-dev', 'libc++abi-dev']
          sources: &sources
            - llvm-toolchain-xenial-4.0
          update: true
      script:
        - CXX=clang++-4.0 bash scripts/build.sh --build-type Debug --libcpp --config --build --test --install --build-example

    - os: linux
      compiler: clang
      env: TEST="build (clang-5.0)"
      addons:
        apt:
          packages: ['clang-5.0', 'libc++-dev', 'libc++abi-dev']
          sources: &sources
            - llvm-toolchain-xenial-5.0
          update: true
      script:
        - CXX=clang++-5.0 bash scripts/build.sh --build-type Debug --libcpp --config --build --test --install --build-example

    - os: linux
      compiler: clang
      env: TEST="build (clang-6.0)"
      addons:
        apt:
          packages: ['clang-6.0', 'libc++-dev', 'libc++abi-dev']
          sources: &sources
            - llvm-toolchain-xenial-6.0
            - ubuntu-toolchain-r-test
          update: true
      script:
        - CXX=clang++-6.0 bash scripts/build.sh --build-type Debug --libcpp --config --build --test --install --build-example

    - os: linux
      compiler: clang
      env: TEST="build (clang-7)"
      addons:
        apt:
          packages: ['clang-7', 'libc++-dev', 'libc++abi-dev']
          sources: &sources
            - llvm-toolchain-xenial-7
            - ubuntu-toolchain-r-test
          update: true
      script:
        - CXX=clang++-7 bash scripts/build.sh --build-type Debug --libcpp --config --build --test --install --build-example

    - os: linux
      compiler: clang
      env: TEST="build (clang-8)"
      addons:
        apt:
          packages: ['clang-8', 'libc++-dev', 'libc++abi-dev']
          sources: &sources
            - llvm-toolchain-xenial-8
            - ubuntu-toolchain-r-test
          update: true
      script:
        - CXX=clang++-8 bash scripts/build.sh --build-type Debug --libcpp --config --build --test --install --build-example

    - os: linux
      compiler: gcc
      env: TEST="ASAN (gcc-8)"
      addons:
        apt:
          packages: ['gcc-8', 'g++-8']
          sources: &sources
            - ubuntu-toolchain-r-test
          update: true
      script:
        - CXX=g++-8 bash scripts/build.sh --build-type Debug --asan --config --build --test

    - os: linux
      compiler: gcc
      env: TEST="LSAN (gcc-8)"
      addons:
        apt:
          packages: ['gcc-8', 'g++-8']
          sources: &sources
            - ubuntu-toolchain-r-test
          update: true
      script:
        - CXX=g++-8 bash scripts/build.sh --build-type Debug --lsan --config --build --test

    - os: linux
      compiler: gcc
      env: TEST="USAN (gcc-8)"
      addons:
        apt:
          packages: ['gcc-8', 'g++-8']
          sources: &sources
            - ubuntu-toolchain-r-test
          update: true
      script:
        - CXX=g++-8 bash scripts/build.sh --build-type Debug --gold --usan --config --build --test

    - os: linux
      compiler: gcc
      env: TEST="TSAN (gcc-8)"
      addons:
        apt:
          packages: ['gcc-8', 'g++-8']
          sources: &sources
            - ubuntu-toolchain-r-test
          update: true
      script:
        - CXX=g++-8 bash scripts/build.sh --build-type Debug --tsan --config --build --test

    # todo: support for MSAN

    - os: linux
      compiler: clang
      env: TEST="clang-tidy-cert (clang-8)"
      addons:
        apt:
          packages: ['clang-8', 'clang-tidy-8', 'libc++-dev', 'libc++abi-dev']
          sources: &sources
            - llvm-toolchain-xenial-8
            - ubuntu-toolchain-r-test
          update: true
      script:
        - CXX=clang++-8 bash scripts/build.sh --libcpp --config --clang-tidy-suffix -8 --clang-tidy-cert

    - os: linux
      compiler: clang
      env: TEST="clang-tidy-hicpp (clang-8)"
      addons:
        apt:
          packages: ['clang-8', 'clang-tidy-8', 'libc++-dev', 'libc++abi-dev']
          sources: &sources
            - llvm-toolchain-xenial-8
            - ubuntu-toolchain-r-test
          update: true
      script:
        - CXX=clang++-8 bash scripts/build.sh --libcpp --config --clang-tidy-suffix -8 --clang-tidy-hicpp

    - os: linux
      compiler: clang
      env: TEST="clang-tidy-misc (clang-8)"
      addons:
        apt:
          packages: ['clang-8', 'clang-tidy-8', 'libc++-dev', 'libc++abi-dev']
          sources: &sources
            - llvm-toolchain-xenial-8
            - ubuntu-toolchain-r-test
          update: true
      script:
        - CXX=clang++-8 bash scripts/build.sh --libcpp --config --clang-tidy-suffix -8 --clang-tidy-misc

    - os: linux
      compiler: clang
      env: TEST="clang-tidy-bugprone (clang-8)"
      addons:
        apt:
          packages: ['clang-8', 'clang-tidy-8', 'libc++-dev', 'libc++abi-dev']
          sources: &sources
            - llvm-toolchain-xenial-8
            - ubuntu-toolchain-r-test
          update: true
      script:
        - CXX=clang++-8 bash scripts/build.sh --libcpp --config --clang-tidy-suffix -8 --clang-tidy-bugprone

    - os: linux
      compiler: clang
      env: TEST="clang-tidy-modernize (clang-8)"
      addons:
        apt:
          packages: ['clang-8', 'clang-tidy-8', 'libc++-dev', 'libc++abi-dev']
          sources: &sources
            - llvm-toolchain-xenial-8
            - ubuntu-toolchain-r-test
          update: true
      script:
        - CXX=clang++-8 bash scripts/build.sh --libcpp --config --clang-tidy-suffix -8 --clang-tidy-modernize

    - os: linux
      compiler: clang
      env: TEST="clang-tidy-performance (clang-8)"
      addons:
        apt:
          packages: ['clang-8', 'clang-tidy-8', 'libc++-dev', 'libc++abi-dev']
          sources: &sources
            - llvm-toolchain-xenial-8
            - ubuntu-toolchain-r-test
          update: true
      script:
        - CXX=clang++-8 bash scripts/build.sh --libcpp --config --clang-tidy-suffix -8 --clang-tidy-performance

    - os: linux
      compiler: clang
      env: TEST="clang-tidy-portability (clang-8)"
      addons:
        apt:
          packages: ['clang-8', 'clang-tidy-8', 'libc++-dev', 'libc++abi-dev']
          sources: &sources
            - llvm-toolchain-xenial-8
            - ubuntu-toolchain-r-test
          update: true
      script:
        - CXX=clang++-8 bash scripts/build.sh --libcpp --config --clang-tidy-suffix -8 --clang-tidy-portability

    - os: linux
      compiler: clang
      env: TEST="clang-tidy-readability (clang-8)"
      addons:
        apt:
          packages: ['clang-8', 'clang-tidy-8', 'libc++-dev', 'libc++abi-dev']
          sources: &sources
            - llvm-toolchain-xenial-8
            - ubuntu-toolchain-r-test
          update: true
      script:
        - CXX=clang++-8 bash scripts/build.sh --libcpp --config --clang-tidy-suffix -8 --clang-tidy-readability

    - os: linux
      compiler: clang
      env: TEST="clang-tidy-clang-analyzer (clang-8)"
      addons:
        apt:
          packages: ['clang-8', 'clang-tidy-8', 'libc++-dev', 'libc++abi-dev']
          sources: &sources
            - llvm-toolchain-xenial-8
            - ubuntu-toolchain-r-test
          update: true
      script:
        - CXX=clang++-8 bash scripts/build.sh --libcpp --config --clang-tidy-suffix -8 --clang-tidy-clang-analyzer

    - os: linux
      compiler: clang
      env: TEST="clang-tidy-cppcoreguidelines (clang-8)"
      addons:
        apt:
          packages: ['clang-8', 'clang-tidy-8', 'libc++-dev', 'libc++abi-dev']
          sources: &sources
            - llvm-toolchain-xenial-8
            - ubuntu-toolchain-r-test
          update: true
      script:
        - CXX=clang++-8 bash scripts/build.sh --libcpp --config --clang-tidy-suffix -8 --clang-tidy-cppcoreguidelines

    - os: linux
      compiler: gcc
      env: TEST="cppcheck"
      addons:
        apt:
          packages: ['gcc-8', 'g++-8']
          sources: &sources
            - ubuntu-toolchain-r-test
          update: true
      script:
        - CXX=g++-8 bash scripts/build.sh --config --cppcheck

    - os: linux
      compiler: gcc
      env: TEST="memcheck (gcc-8)"
      addons:
        apt:
          packages: ['gcc-8', 'g++-8', 'valgrind']
          sources: &sources
            - ubuntu-toolchain-r-test
          update: true
      script:
        - CXX=g++-8 bash scripts/build.sh --build-type Debug --config --build --memcheck

    - os: linux
      compiler: gcc
      env: TEST="helgrind (gcc-8)"
      addons:
        apt:
          packages: ['gcc-8', 'g++-8', 'valgrind']
          sources: &sources
            - ubuntu-toolchain-r-test
          update: true
      script:
        - CXX=g++-8 bash scripts/build.sh --build-type Debug --config --build --helgrind || true

    - os: linux
      compiler: gcc
      env: TEST="codecov (gcc-7)"
      addons:
        apt:
          packages: ['gcc-7', 'g++-7', 'gcovr', 'lcov']
          sources: &sources
            - ubuntu-toolchain-r-test
          update: true
      script:
        - sudo -H pip install --upgrade pip
        - sudo -H pip install coverage
        - CXX=g++-7 bash scripts/build.sh --build-type Debug --coverage --config --build --test --codecov

    #- os: linux
    #  compiler: gcc
    #  env: TEST="coveralls (gcc-8)"
    #  addons:
    #    apt:
    #      packages: ['gcc-8', 'g++-8', 'gcovr']
    #      sources: &sources
    #        - ubuntu-toolchain-r-test
    #      update: true
    #  script:
    #    - sudo -H pip install --upgrade pip
    #    - sudo -H pip install cpp-coveralls
    #    - CXX=g++-8 bash scripts/build.sh --build-type Debug --coverage --config --build --test --coveralls

    #- os: osx
    #  compiler: clang
    #  osx_image: xcode7.3
    #  env: TEST="build (xcode7.3)"
    #  script:
    #    - bash scripts/build.sh --config --build --test --install --build-example

    - os: osx
      compiler: clang
      osx_image: xcode8.3
      env: TEST="build (xcode8.3)"
      script:
        - bash scripts/build.sh --config --build --test --install --build-example

    - os: osx
      compiler: clang
      osx_image: xcode9.4
      env: TEST="build (xcode9.4)"
      script:
        - bash scripts/build.sh --config --build --test --install --build-example

    - os: osx
      compiler: clang
      osx_image: xcode10.3
      env: TEST="build (xcode10.3)"
      script:
        - bash scripts/build.sh --config --build --test --install --build-example

    - os: osx
      compiler: clang
      osx_image: xcode11.2
      env: TEST="build (xcode11.2)"
      script:
        - bash scripts/build.sh --config --build --test --install --build-example
