sudo: required
dist: focal
language: cpp

before_script:
  - echo $TRAVIS_OS_NAME
  - |
    if [ "$TRAVIS_OS_NAME" = "osx" ]; then
       bash scripts/setup_osxbrew.sh
    fi
  - |
    if [ "$TRAVIS_OS_NAME" = "linux" ]; then
       bash scripts/setup_ubuntu2004.sh --default
    fi

# TODO: support for building on Windows
# TODO: support for code coverage reports for branches
# TODO: support for building documentation (e.g. doxygen)

matrix:
  include:
    - os: linux
      compiler: gcc
      env: TEST="build (gcc)"
      script:
        - CXX=g++ bash scripts/build.sh --build-type Debug --config --build --test --install --build-example

    - os: linux
      compiler: clang
      env: TEST="build (clang)"
      script:
        - CXX=clang++ bash scripts/build.sh --build-type Debug --libcpp --config --build --test --install --build-example

    - os: linux
      compiler: gcc
      env: TEST="ASAN (gcc)"
      script:
        - CXX=g++ bash scripts/build.sh --build-type Debug --asan --config --build --test

    - os: linux
      compiler: gcc
      env: TEST="LSAN (gcc)"
      script:
        - CXX=g++ bash scripts/build.sh --build-type Debug --lsan --config --build --test

    - os: linux
      compiler: gcc
      env: TEST="USAN (gcc)"
      script:
        - CXX=g++ bash scripts/build.sh --build-type Debug --usan --config --build --test

    - os: linux
      compiler: gcc
      env: TEST="TSAN (gcc)"
      script:
        - CXX=g++ bash scripts/build.sh --build-type Debug --tsan --config --build --test

    - os: linux
      compiler: clang
      env: TEST="clang-tidy-cert (clang)"
      script:
        - CXX=clang++ bash scripts/build.sh --libcpp --config --build --clang-tidy-cert

    - os: linux
      compiler: clang
      env: TEST="clang-tidy-hicpp (clang)"
      script:
        - CXX=clang++ bash scripts/build.sh --libcpp --config --build --clang-tidy-hicpp

    - os: linux
      compiler: clang
      env: TEST="clang-tidy-misc (clang)"
      script:
        - CXX=clang++ bash scripts/build.sh --libcpp --config --build --clang-tidy-misc

    - os: linux
      compiler: clang
      env: TEST="clang-tidy-bugprone (clang)"
      script:
        - CXX=clang++ bash scripts/build.sh --libcpp --config --build --clang-tidy-bugprone

    - os: linux
      compiler: clang
      env: TEST="clang-tidy-modernize (clang)"
      script:
        - CXX=clang++ bash scripts/build.sh --libcpp --config --build --clang-tidy-modernize

    - os: linux
      compiler: clang
      env: TEST="clang-tidy-performance (clang)"
      script:
        - CXX=clang++ bash scripts/build.sh --libcpp --config --build --clang-tidy-performance

    - os: linux
      compiler: clang
      env: TEST="clang-tidy-portability (clang)"
      script:
        - CXX=clang++ bash scripts/build.sh --libcpp --config --build --clang-tidy-portability

    - os: linux
      compiler: clang
      env: TEST="clang-tidy-readability (clang)"
      script:
        - CXX=clang++ bash scripts/build.sh --libcpp --config --build --clang-tidy-readability

    - os: linux
      compiler: clang
      env: TEST="clang-tidy-clang-analyzer (clang)"
      script:
        - CXX=clang++ travis_wait 30 bash scripts/build.sh --libcpp --config --build --clang-tidy-clang-analyzer

    - os: linux
      compiler: clang
      env: TEST="clang-tidy-cppcoreguidelines (clang)"
      script:
        - CXX=clang++ bash scripts/build.sh --libcpp --config --build --clang-tidy-cppcoreguidelines

    - os: linux
      compiler: gcc
      env: TEST="cppcheck"
      script:
        - CXX=g++ bash scripts/build.sh --config --cppcheck

    - os: linux
      compiler: gcc
      env: TEST="memcheck (gcc)"
      script:
        - CXX=g++ bash scripts/build.sh --build-type RelWithDebInfo --config --build --memcheck

    #- os: linux
    #  compiler: gcc
    #  env: TEST="helgrind (gcc)"
    #  script:
    #    - CXX=g++ bash scripts/build.sh --build-type Debug --config --build --helgrind || true

    - os: linux
      compiler: gcc
      env: TEST="codecov (gcc)"
      script:
        - sudo -H pip install --upgrade pip
        - sudo -H pip install coverage
        - CXX=g++ GCOV=gcov bash scripts/build.sh --build-type Debug --coverage --config --build --test --codecov

    #- os: linux
    #  compiler: gcc
    #  env: TEST="coveralls (gcc-8)"
    #  addons:
    #    apt:
    #      packages: ['gcc-8', 'g++-8', 'gcovr']
    #      sources: &sources
    #        - ubuntu-toolchain-r-test
    #      update: true
    #  script:
    #    - sudo -H pip install --upgrade pip
    #    - sudo -H pip install cpp-coveralls
    #    - CXX=g++-8 bash scripts/build.sh --build-type Debug --coverage --config --build --test --coveralls

    - os: osx
      compiler: clang
      osx_image: xcode10.3
      env: TEST="build (xcode10.3)"
      script:
        - bash scripts/build.sh --config --build --test --install --build-example

    - os: osx
      compiler: clang
      osx_image: xcode11.6
      env: TEST="build (xcode11.6)"
      script:
        - bash scripts/build.sh --config --build --test --install --build-example

    - os: osx
      compiler: clang
      osx_image: xcode12.2
      env: TEST="build (xcode12.2)"
      script:
        - bash scripts/build.sh --config --build --test --install --build-example
